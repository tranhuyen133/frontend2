class Product {
    constructor(id, name, price, category, quantity) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.category = category;
        this.quantity = quantity;
    }
}

class ProductManager {
    constructor() {
        this.products = [];
        this.nextId = 1; 
    }

    addProduct(name, price, category, quantity) {
        const product = new Product(this.nextId++, name, price, category, quantity);
        this.products.push(product);
        console.log("‚úîÔ∏è ƒê√£ th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
    }

    displayProducts() {
        if (this.products.length === 0) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh s√°ch!");
            return;
        }
        console.log("\n Danh s√°ch s·∫£n ph·∫©m:");
        this.products.forEach(p => {
            console.log(`ID: ${p.id} | Name: ${p.name} | Price: ${p.price} | Category: ${p.category} | Quantity: ${p.quantity}`);
        });
    }

    showProductById(id) {
        const product = this.products.find(p => p.id === id);
        if (product) {
            console.log("\nüîç Chi ti·∫øt s·∫£n ph·∫©m:");
            console.log(`ID: ${product.id} | Name: ${product.name} | Price: ${product.price} | Category: ${product.category} | Quantity: ${product.quantity}`);
        } else {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ƒë√£ nh·∫≠p!");
        }
    }

    updateProduct(id, name, price, category, quantity) {
        const product = this.products.find(p => p.id === id);
        if (product) {
            product.name = name;
            product.price = price;
            product.category = category;
            product.quantity = quantity;
            console.log(" C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
        } else {
            console.log(" Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t!");
        }
    }

    deleteProduct(id) {
        const index = this.products.findIndex(p => p.id === id);
        if (index !== -1) {
            this.products.splice(index, 1);
            console.log(" X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
        } else {
            console.log(" Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a!");
        }
    }

    filterProductsByPrice(min, max) {
        const filteredProducts = this.products.filter(p => p.price >= min && p.price <= max);
        if (filteredProducts.length === 0) {
            console.log(" Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong kho·∫£ng gi√° n√†y!");
            return;
        }
        console.log("\n S·∫£n ph·∫©m trong kho·∫£ng gi√°:");
        filteredProducts.forEach(p => {
            console.log(`ID: ${p.id} | Name: ${p.name} | Price: ${p.price} | Category: ${p.category} | Quantity: ${p.quantity}`);
        });
    }
}

const manager = new ProductManager();
const prompt = require("prompt-sync")();

function main() {
    while (true) {
        console.log("\n--- H·ªÜ TH·ªêNG QU·∫¢N L√ù S·∫¢N PH·∫®M ---");
        console.log("1.  Th√™m s·∫£n ph·∫©m");
        console.log("2. Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m");
        console.log("3.  Xem chi ti·∫øt s·∫£n ph·∫©m theo ID");
        console.log("4.  C·∫≠p nh·∫≠t s·∫£n ph·∫©m theo ID");
        console.log("5.  X√≥a s·∫£n ph·∫©m theo ID");
        console.log("6.  L·ªçc s·∫£n ph·∫©m theo kho·∫£ng gi√°");
        console.log("7.  Tho√°t");

        let choice = prompt("üîπ Ch·ªçn ch·ª©c nƒÉng (1-7): ");

        switch (choice) {
            case "1":
                let name = prompt("Nh·∫≠p t√™n s·∫£n ph·∫©m: ");
                let price = parseFloat(prompt("Nh·∫≠p gi√° s·∫£n ph·∫©m: "));
                let category = prompt("Nh·∫≠p danh m·ª•c s·∫£n ph·∫©m: ");
                let quantity = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m: "));
                manager.addProduct(name, price, category, quantity);
                break;
            case "2":
                manager.displayProducts();
                break;
            case "3":
                let searchId = parseInt(prompt("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn xem: "));
                manager.showProductById(searchId);
                break;
            case "4":
                let updateId = parseInt(prompt("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t: "));
                let newName = prompt("Nh·∫≠p t√™n m·ªõi: ");
                let newPrice = parseFloat(prompt("Nh·∫≠p gi√° m·ªõi: "));
                let newCategory = prompt("Nh·∫≠p danh m·ª•c m·ªõi: ");
                let newQuantity = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng m·ªõi: "));
                manager.updateProduct(updateId, newName, newPrice, newCategory, newQuantity);
                break;
            case "5":
                let deleteId = parseInt(prompt("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn x√≥a: "));
                manager.deleteProduct(deleteId);
                break;
            case "6":
                let minPrice = parseFloat(prompt("Nh·∫≠p kho·∫£ng gi√° t·ªëi thi·ªÉu: "));
                let maxPrice = parseFloat(prompt("Nh·∫≠p kho·∫£ng gi√° t·ªëi ƒëa: "));
                manager.filterProductsByPrice(minPrice, maxPrice);
                break;
            case "7":
                console.log(" Tho√°t ch∆∞∆°ng tr√¨nh.");
                return;
            default:
                console.log(" L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i!");
        }
    }
}

main();
